// Code generated by protoc-gen-go.
// source: github.com/nii236/nii-forex/tickSubscriber/proto/tickSubscriber.proto
// DO NOT EDIT!

/*
Package tickSubscriber is a generated protocol buffer package.

It is generated from these files:
	github.com/nii236/nii-forex/tickSubscriber/proto/tickSubscriber.proto

It has these top-level messages:
	Tick
	SubscribeRequest
	SubscribeResponse
*/
package tickSubscriber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Tick struct {
	Pair string `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
	Time int64  `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Bid  int32  `protobuf:"varint,3,opt,name=bid" json:"bid,omitempty"`
	Ask  int32  `protobuf:"varint,4,opt,name=ask" json:"ask,omitempty"`
	Last int32  `protobuf:"varint,5,opt,name=last" json:"last,omitempty"`
}

func (m *Tick) Reset()                    { *m = Tick{} }
func (m *Tick) String() string            { return proto.CompactTextString(m) }
func (*Tick) ProtoMessage()               {}
func (*Tick) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SubscribeRequest struct {
	Pair string `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SubscribeResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Tick)(nil), "Tick")
	proto.RegisterType((*SubscribeRequest)(nil), "SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "SubscribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TickSubscriber service

type TickSubscriberClient interface {
	StartSubcription(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error)
}

type tickSubscriberClient struct {
	c           client.Client
	serviceName string
}

func NewTickSubscriberClient(serviceName string, c client.Client) TickSubscriberClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "ticksubscriber"
	}
	return &tickSubscriberClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *tickSubscriberClient) StartSubcription(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TickSubscriber.StartSubcription", in)
	out := new(SubscribeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TickSubscriber service

type TickSubscriberHandler interface {
	StartSubcription(context.Context, *SubscribeRequest, *SubscribeResponse) error
}

func RegisterTickSubscriberHandler(s server.Server, hdlr TickSubscriberHandler) {
	s.Handle(s.NewHandler(&TickSubscriber{hdlr}))
}

type TickSubscriber struct {
	TickSubscriberHandler
}

func (h *TickSubscriber) StartSubcription(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error {
	return h.TickSubscriberHandler.StartSubcription(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x8f, 0x3f, 0x4b, 0xc5, 0x30,
	0x14, 0x47, 0x7d, 0xb6, 0x15, 0xbc, 0xfe, 0xc1, 0x97, 0x29, 0x38, 0x3d, 0x32, 0xb9, 0x98, 0xc2,
	0x2b, 0xb8, 0x38, 0xbb, 0x08, 0x2e, 0xda, 0x2f, 0x90, 0xd4, 0xa8, 0x97, 0xda, 0x26, 0xde, 0xdc,
	0x82, 0x1f, 0xdf, 0xa4, 0x88, 0xd8, 0xbe, 0x29, 0x9c, 0xc3, 0x8f, 0x93, 0x04, 0x1e, 0xde, 0x91,
	0x3f, 0x26, 0xab, 0x3b, 0x3f, 0xd4, 0x23, 0xe2, 0xbe, 0xb9, 0xcb, 0xc7, 0xed, 0x9b, 0x27, 0xf7,
	0x5d, 0x33, 0x76, 0xfd, 0xcb, 0x64, 0x63, 0x47, 0x68, 0x1d, 0xd5, 0x81, 0x3c, 0xfb, 0x95, 0xd4,
	0xb3, 0x54, 0x8f, 0x50, 0xb6, 0xc9, 0x8b, 0x73, 0x28, 0x83, 0x41, 0x92, 0x9b, 0xdd, 0xe6, 0xe6,
	0x34, 0x13, 0xe3, 0xe0, 0xe4, 0x71, 0xa2, 0x42, 0x9c, 0x41, 0x61, 0xf1, 0x55, 0x16, 0x09, 0xaa,
	0x0c, 0x26, 0xf6, 0xb2, 0x9c, 0x21, 0xed, 0x3e, 0x4d, 0x64, 0x59, 0x65, 0x52, 0x3b, 0xb8, 0xfa,
	0xeb, 0x3f, 0xbb, 0xaf, 0xc9, 0x45, 0x5e, 0x76, 0x95, 0x82, 0xed, 0xbf, 0x45, 0x0c, 0x7e, 0x8c,
	0x4e, 0x5c, 0x40, 0xe5, 0x88, 0xfc, 0xef, 0x66, 0xff, 0x04, 0x97, 0xed, 0xe2, 0xa5, 0xe2, 0x3e,
	0x75, 0xd9, 0x10, 0x27, 0x95, 0x4c, 0x60, 0xf4, 0xa3, 0xd8, 0xea, 0xf5, 0x55, 0xd7, 0x42, 0x1f,
	0xb4, 0xd5, 0x91, 0x3d, 0x99, 0xff, 0xd9, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0x08, 0xd5, 0x13,
	0x42, 0x30, 0x01, 0x00, 0x00,
}
