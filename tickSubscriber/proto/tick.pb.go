// Code generated by protoc-gen-go.
// source: github.com/nii236/nii-forex/tickSubscriber/proto/tick.proto
// DO NOT EDIT!

/*
Package tick is a generated protocol buffer package.

It is generated from these files:
	github.com/nii236/nii-forex/tickSubscriber/proto/tick.proto

It has these top-level messages:
	TickRequest
	TickResponse
	Ping
	Message
*/
package tick

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type TickRequest struct {
	Pair string `protobuf:"bytes,1,opt,name=pair" json:"pair,omitempty"`
}

func (m *TickRequest) Reset()                    { *m = TickRequest{} }
func (m *TickRequest) String() string            { return proto.CompactTextString(m) }
func (*TickRequest) ProtoMessage()               {}
func (*TickRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TickResponse struct {
	Time int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Bid  int32 `protobuf:"varint,2,opt,name=bid" json:"bid,omitempty"`
	Ask  int32 `protobuf:"varint,3,opt,name=ask" json:"ask,omitempty"`
	Last int32 `protobuf:"varint,4,opt,name=last" json:"last,omitempty"`
}

func (m *TickResponse) Reset()                    { *m = TickResponse{} }
func (m *TickResponse) String() string            { return proto.CompactTextString(m) }
func (*TickResponse) ProtoMessage()               {}
func (*TickResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Ping struct {
	Stroke int64 `protobuf:"varint,1,opt,name=stroke" json:"stroke,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Message struct {
	Say string `protobuf:"bytes,1,opt,name=say" json:"say,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*TickRequest)(nil), "TickRequest")
	proto.RegisterType((*TickResponse)(nil), "TickResponse")
	proto.RegisterType((*Ping)(nil), "Ping")
	proto.RegisterType((*Message)(nil), "Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TickRecorder service

type TickRecorderClient interface {
	TickHandler(ctx context.Context, in *TickRequest, opts ...client.CallOption) (*TickResponse, error)
}

type tickRecorderClient struct {
	c           client.Client
	serviceName string
}

func NewTickRecorderClient(serviceName string, c client.Client) TickRecorderClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "tickrecorder"
	}
	return &tickRecorderClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *tickRecorderClient) TickHandler(ctx context.Context, in *TickRequest, opts ...client.CallOption) (*TickResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TickRecorder.TickHandler", in)
	out := new(TickResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TickRecorder service

type TickRecorderHandler interface {
	TickHandler(context.Context, *TickRequest, *TickResponse) error
}

func RegisterTickRecorderHandler(s server.Server, hdlr TickRecorderHandler) {
	s.Handle(s.NewHandler(&TickRecorder{hdlr}))
}

type TickRecorder struct {
	TickRecorderHandler
}

func (h *TickRecorder) TickHandler(ctx context.Context, in *TickRequest, out *TickResponse) error {
	return h.TickRecorderHandler.TickHandler(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8f, 0x31, 0x4f, 0xc3, 0x30,
	0x14, 0x84, 0x29, 0x09, 0x45, 0xb8, 0x81, 0x21, 0x03, 0x8a, 0x60, 0x41, 0x9e, 0x18, 0xc0, 0x91,
	0x5a, 0x89, 0x05, 0x46, 0x06, 0x16, 0x24, 0x04, 0xfc, 0x01, 0xdb, 0x79, 0x84, 0xa7, 0xb4, 0x76,
	0x78, 0xcf, 0x91, 0xe0, 0xdf, 0x63, 0x3b, 0x20, 0x75, 0xb2, 0xbf, 0x3b, 0x9f, 0xee, 0x2c, 0xee,
	0x7b, 0x0c, 0x9f, 0x93, 0x51, 0xd6, 0xef, 0x5a, 0x87, 0xb8, 0xde, 0xdc, 0xa5, 0xe3, 0xf6, 0xc3,
	0x13, 0x7c, 0xb7, 0x01, 0xed, 0xf0, 0x36, 0x19, 0xb6, 0x84, 0x06, 0xa8, 0x1d, 0xc9, 0x07, 0x9f,
	0x45, 0x95, 0xaf, 0xf2, 0x52, 0xac, 0xde, 0x23, 0xbd, 0xc2, 0xd7, 0x04, 0x1c, 0xea, 0x4a, 0x94,
	0xa3, 0x46, 0x6a, 0x16, 0x57, 0x8b, 0xeb, 0x13, 0xf9, 0x28, 0xaa, 0xd9, 0xe4, 0xd1, 0x3b, 0x86,
	0xe4, 0x06, 0xdc, 0x41, 0x76, 0x8b, 0x7a, 0x25, 0x0a, 0x83, 0x5d, 0x73, 0x18, 0xe1, 0x28, 0x81,
	0xe6, 0xa1, 0x29, 0x32, 0xc4, 0x77, 0x5b, 0xcd, 0xa1, 0x29, 0x13, 0xc9, 0x73, 0x51, 0xbe, 0xa0,
	0xeb, 0xeb, 0x33, 0xb1, 0xe4, 0x40, 0x7e, 0xf8, 0xcb, 0x47, 0xfd, 0xf8, 0x19, 0x98, 0x75, 0x0f,
	0x29, 0xcd, 0xfa, 0x67, 0x6e, 0x5d, 0x3f, 0xfc, 0xb7, 0x5a, 0x4f, 0x1d, 0x50, 0x7d, 0x33, 0x4f,
	0x7c, 0xd2, 0xae, 0xdb, 0x46, 0xac, 0xd4, 0xde, 0xe0, 0x8b, 0x53, 0xb5, 0xbf, 0x50, 0x1e, 0x98,
	0x65, 0xfe, 0xd7, 0xe6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x75, 0x5c, 0x39, 0x83, 0x16, 0x01, 0x00,
	0x00,
}
